/**
 * @fileoverview gRPC-Web generated client stub for datalog
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.15.6
// source: GrpcService/Protos/datalog.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = {};
proto.datalog = require('./datalog_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.datalog.DataLogClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.datalog.DataLogPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.datalog.IsAliveRequest,
 *   !proto.datalog.IsAliveReply>}
 */
const methodDescriptor_DataLog_IsAlive = new grpc.web.MethodDescriptor(
  '/datalog.DataLog/IsAlive',
  grpc.web.MethodType.UNARY,
  proto.datalog.IsAliveRequest,
  proto.datalog.IsAliveReply,
  /**
   * @param {!proto.datalog.IsAliveRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.datalog.IsAliveReply.deserializeBinary
);


/**
 * @param {!proto.datalog.IsAliveRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.datalog.IsAliveReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.datalog.IsAliveReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.datalog.DataLogClient.prototype.isAlive =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/datalog.DataLog/IsAlive',
      request,
      metadata || {},
      methodDescriptor_DataLog_IsAlive,
      callback);
};


/**
 * @param {!proto.datalog.IsAliveRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.datalog.IsAliveReply>}
 *     Promise that resolves to the response
 */
proto.datalog.DataLogPromiseClient.prototype.isAlive =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/datalog.DataLog/IsAlive',
      request,
      metadata || {},
      methodDescriptor_DataLog_IsAlive);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.datalog.DeveloperResponse>}
 */
const methodDescriptor_DataLog_Developers = new grpc.web.MethodDescriptor(
  '/datalog.DataLog/Developers',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  proto.datalog.DeveloperResponse,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.datalog.DeveloperResponse.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.datalog.DeveloperResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.datalog.DeveloperResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.datalog.DataLogClient.prototype.developers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/datalog.DataLog/Developers',
      request,
      metadata || {},
      methodDescriptor_DataLog_Developers,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.datalog.DeveloperResponse>}
 *     Promise that resolves to the response
 */
proto.datalog.DataLogPromiseClient.prototype.developers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/datalog.DataLog/Developers',
      request,
      metadata || {},
      methodDescriptor_DataLog_Developers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.datalog.ReadingRequest,
 *   !proto.datalog.SuccessResponse>}
 */
const methodDescriptor_DataLog_SubmitReading = new grpc.web.MethodDescriptor(
  '/datalog.DataLog/SubmitReading',
  grpc.web.MethodType.UNARY,
  proto.datalog.ReadingRequest,
  proto.datalog.SuccessResponse,
  /**
   * @param {!proto.datalog.ReadingRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.datalog.SuccessResponse.deserializeBinary
);


/**
 * @param {!proto.datalog.ReadingRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.datalog.SuccessResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.datalog.SuccessResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.datalog.DataLogClient.prototype.submitReading =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/datalog.DataLog/SubmitReading',
      request,
      metadata || {},
      methodDescriptor_DataLog_SubmitReading,
      callback);
};


/**
 * @param {!proto.datalog.ReadingRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.datalog.SuccessResponse>}
 *     Promise that resolves to the response
 */
proto.datalog.DataLogPromiseClient.prototype.submitReading =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/datalog.DataLog/SubmitReading',
      request,
      metadata || {},
      methodDescriptor_DataLog_SubmitReading);
};


module.exports = proto.datalog;

